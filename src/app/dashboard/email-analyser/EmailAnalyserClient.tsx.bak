"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/components/ui/use-toast';
import { Inbox, RefreshCw, Loader2, User, Mail, Eye, Calendar, Clock, ArrowUpRight, Filter, ChevronRight, MessageSquare, CheckCircle2, AlertCircle, Search, Send } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { formatDistanceToNow, format } from 'date-fns';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Textarea } from '@/components/ui/textarea';
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { supabase } from '@/lib/supabaseClient';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';

interface Contact {
  id: string;
  full_name: string;
  email: string;
}

interface Email {
  id: string;
  sender: string;
  subject: string;
  raw_content: string;
  analysis: string;
  created_at: string;
  contact_id?: string;
  contacts?: {
    id: string;
    full_name: string;
    email: string;
  }[];
}

export default function EmailAnalyserClient() {
  // State management
  const [activeTab, setActiveTab] = useState<string>('all');
  const [loading, setLoading] = useState<boolean>(true);
  const [processing, setProcessing] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [emails, setEmails] = useState<Email[]>([]);
  const [selectedEmail, setSelectedEmail] = useState<Email | null>(null);
  const [lastProcessed, setLastProcessed] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [stats, setStats] = useState<{ processed: number; errors: number }>({ 
    processed: 0, 
    errors: 0 
  });
  
  // UI state management
  const [activeView, setActiveView] = useState<'inbox' | 'analysis' | 'response'>('inbox');
  const [suggestedResponse, setSuggestedResponse] = useState<string>('');
  const [generatingResponse, setGeneratingResponse] = useState<boolean>(false);
  
  const { toast } = useToast();
  const { data: session, status } = useSession();
  const router = useRouter();

  // Load emails on component mount
  useEffect(() => {
    loadEmails();
  }, []);

  // Function to load emails
  const loadEmails = async () => {
    setLoading(true);
    setError(null);
    try {
      // Use Supabase directly instead of the API route
      const { data, error } = await supabase
        .from('emails')
        .select(`
          id,
          subject,
          sender,
          raw_content,
          analysis,
          contact_id,
          created_at,
          contacts(id, full_name, email)
        `)
        .order('created_at', { ascending: false });

      if (error) {
        throw new Error(`Failed to fetch emails: ${error.message}`);
      }

      setEmails(data || []);
    } catch (err: any) {
      console.error('Error loading emails:', err);
      setError(err.message);
      toast({
        title: 'Error',
        description: err.message || 'Failed to load emails',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // Function to process new emails
  const processEmails = async () => {
    setProcessing(true);
    setError(null);
    setSuccess(null);
    
    // Check if user is authenticated
    if (status === 'loading') {
      console.log('Session still loading, waiting...');
      setProcessing(false);
      return;
    }
    
    try {
      // Get Supabase session as a fallback
      let authToken = null;
      const { data: { session: supabaseSession } } = await supabase.auth.getSession();
      if (supabaseSession?.access_token) {
        authToken = supabaseSession.access_token;
        console.log('Got Supabase auth token');
      } else {
        console.log('No Supabase session available');
      }
      
      if (status === 'unauthenticated' && !authToken) {
        console.log('No authentication method available, redirecting to sign in');
        toast({
          title: 'Authentication required',
          description: 'Please sign in to process emails',
          variant: 'destructive',
        });
        router.push('/signin');
        setProcessing(false);
        return;
      }
    
      console.log('NextAuth session status:', status);
      console.log('NextAuth session data:', session);
      
      // Show processing status updates to user
      setSuccess('Connecting to email server... (Test mode: processing only the most recent unread email)');
      
      // Set up a timeout indicator for long-running processes
      const processingUpdates = [
        { message: 'Fetching emails...', delay: 3000 },
        { message: 'Analyzing emails...', delay: 8000 },
        { message: 'Still working...', delay: 15000 },
        { message: 'This is taking longer than expected...', delay: 25000 }
      ];
      
      // Set up the processing status updates
      const updateTimers = processingUpdates.map(update => {
        return setTimeout(() => {
          if (processing) { // Only update if still processing
            setSuccess(update.message);
          }
        }, update.delay);
      });
      
      // Trigger server-side email processing via API route with proper headers
      console.log('Making API call to process emails...');
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 45000); // Client-side timeout after 45s
        
        const res = await fetch('/api/emails/process', { 
          method: 'POST', 
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ authToken }),
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        console.log('API response status:', res.status);
        
        if (!res.ok) {
          const errorData = await res.json().catch(() => ({}));
          const errorMessage = errorData.message || `Server error: ${res.status}`;
          console.error('Email processing failed:', errorMessage);
          setError(errorMessage);
          setProcessing(false);
          return;
        }
        
        const data = await res.json();
        console.log('Email processing result:', data);
        
        setSuccess(`Successfully processed ${data.processed} emails with ${data.errors} errors`);
      } catch (err: any) {
        if (err?.name === 'AbortError') {
          setError('Email processing timed out. Please try again later.');
        } else {
          setError(`Error processing emails: ${err?.message || 'Unknown error'}`);
        }
        console.error('Email processing error:', err);
      } finally {
        // Clear all update timers
        updateTimers.forEach(timerId => clearTimeout(timerId));
        setProcessing(false);
        
        // Update last processed time if successful
        if (!error) {
          setLastProcessed(new Date().toISOString());
        }
      }
      // Success message is already set in the try block
      // Toast notification is handled via the success state
      
      // Refresh the email list
      loadEmails();
    } catch (err: any) {
      console.error('Error processing emails:', err);
      setError(err instanceof Error ? err.message : 'Failed to process emails');
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to process emails',
        variant: 'destructive',
      });
    } finally {
      setProcessing(false);
    }
  };

  // Function to filter emails based on tab and search query
  const filteredEmails = emails.filter(email => {
    // Filter by tab
    if (activeTab === 'with-contact' && !email.contact_id) return false;
    if (activeTab === 'unlinked' && email.contact_id) return false;
    
    // Filter by search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      return (
        email.subject?.toLowerCase().includes(query) ||
        email.sender?.toLowerCase().includes(query) ||
        email.raw_content?.toLowerCase().includes(query)
      );
    }
    
    return true;
  });

  // Function to view email details
  const viewEmail = (email: Email) => {
    setSelectedEmail(email);
    // Reset suggested response when changing emails
    setSuggestedResponse('');
    // Change view to analysis when selecting an email
    setActiveView('analysis');
  };

  // Generate a suggested response for the selected email
  const generateResponse = async () => {
    if (!selectedEmail) return;
    
    setGeneratingResponse(true);
    
    try {
      // In a real implementation, this would call an API endpoint
      // For now, we'll simulate a response generation
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Generate a contextual response based on the email content
      const sender = selectedEmail.contacts && selectedEmail.contacts.length > 0 ? 
        getContactName(selectedEmail.contacts[0]) : 
        getSenderName(selectedEmail.sender);
      
      const response = `Dear ${sender},\n\nThank you for your email regarding "${selectedEmail.subject}". \n\nI've reviewed the information you shared and would like to discuss this further. Would you be available for a quick call tomorrow to go over the details?\n\nBest regards,\n[Your Name]`;
      
      setSuggestedResponse(response);
      toast({
        title: 'Response Generated',
        description: 'A suggested response has been created based on the email content.',
        variant: 'default',
      });
    } catch (error) {
      console.error('Error generating response:', error);
      toast({
        title: 'Error',
        description: 'Failed to generate a response. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setGeneratingResponse(false);
    }
  };

  // Function to get sender name from email or contact
  const getSenderName = (email: string) => {
    return email.split('@')[0];
  };

  // Function to get initials from name
  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map(part => part[0])
      .join('')
      .toUpperCase();
  };

  // Function to get full name from contact
  const getContactName = (contact: { full_name: string; email: string; } | undefined) => {
    if (!contact) return '';
    return contact.full_name || contact.email.split('@')[0];
  };

  // Function to format date
  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return formatDistanceToNow(date, { addSuffix: true });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Email Analyser</h1>
          <p className="text-muted-foreground">
            Automatically fetch, analyze, and manage your emails
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button
            onClick={loadEmails}
            variant="outline"
            disabled={loading}
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Loading...
              </>
            ) : (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                Refresh
              </>
            )}
          </Button>
          <Button
            onClick={processEmails}
            disabled={processing}
          >
            {processing ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Processing...
              </>
            ) : (
              <>
                <Inbox className="mr-2 h-4 w-4" />
                Process New Emails
              </>
            )}
          </Button>
        </div>
      </div>
      
      {/* View Navigation */}
      <div className="border-b">
        <div className="flex h-10 items-center space-x-4">
          <div
            className={`flex items-center space-x-2 border-b-2 px-4 ${activeView === 'inbox' ? 'border-primary text-primary' : 'border-transparent text-muted-foreground hover:text-foreground'}`}
            onClick={() => setActiveView('inbox')}
            role="button"
            tabIndex={0}
          >
            <Mail className="h-4 w-4" />
            <span>Inbox</span>
          </div>
          <div
            className={`flex items-center space-x-2 border-b-2 px-4 ${activeView === 'analysis' ? 'border-primary text-primary' : 'border-transparent text-muted-foreground hover:text-foreground'}`}
            onClick={() => selectedEmail && setActiveView('analysis')}
            role="button"
            tabIndex={0}
            style={{ opacity: selectedEmail ? 1 : 0.5, cursor: selectedEmail ? 'pointer' : 'not-allowed' }}
          >
            <Eye className="h-4 w-4" />
            <span>Analysis</span>
          </div>
          <div
            className={`flex items-center space-x-2 border-b-2 px-4 ${activeView === 'response' ? 'border-primary text-primary' : 'border-transparent text-muted-foreground hover:text-foreground'}`}
            onClick={() => selectedEmail && setActiveView('response')}
            role="button"
            tabIndex={0}
            style={{ opacity: selectedEmail ? 1 : 0.5, cursor: selectedEmail ? 'pointer' : 'not-allowed' }}
          >
            <MessageSquare className="h-4 w-4" />
            <span>Response</span>
          </div>
        </div>
      </div>

      {lastProcessed && stats && (
        <Alert>
          <CheckCircle2 className="h-4 w-4" />
          <AlertTitle>Last email processing</AlertTitle>
          <AlertDescription>
            Processed {stats.processed} emails with {stats.errors} errors at {format(new Date(lastProcessed), 'PPpp')}
          </AlertDescription>
        </Alert>
      )}

      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Inbox View */}
      {activeView === 'inbox' && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Email List */}
          <div className="md:col-span-1 space-y-4">
            <Card>
              <CardHeader className="pb-2">
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle>Analyzed Emails</CardTitle>
                    <CardDescription>
                      {filteredEmails.length} of {emails.length} emails shown
                    </CardDescription>
                  </div>
                </div>
                <div className="mt-2">
                  <div className="relative">
                    <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search emails..."
                      className="pl-8"
                      value={searchQuery}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}
                    />
                  </div>
                </div>
              </CardHeader>
              <div className="px-6 pb-3">
                <Tabs 
                  value={activeTab} 
                  onValueChange={setActiveTab}
                  className="w-full"
                >
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="all">All</TabsTrigger>
                    <TabsTrigger value="contacts">With Contact</TabsTrigger>
                    <TabsTrigger value="unlinked">Unlinked</TabsTrigger>
                  </TabsList>
                </Tabs>
              </div>
              <CardContent className="p-0">
                {loading ? (
                  <div className="space-y-2 p-4">
                    {[1, 2, 3].map((i) => (
                      <div key={i} className="flex flex-col space-y-2">
                        <Skeleton className="h-4 w-3/4" />
                        <Skeleton className="h-4 w-1/2" />
                        <Skeleton className="h-4 w-1/4" />
                      </div>
                    ))}
                  </div>
                ) : filteredEmails.length === 0 ? (
                  <div className="p-8 text-center">
                    <Mail className="h-12 w-12 mx-auto text-muted-foreground" />
                    <h3 className="mt-2 text-lg font-medium">No emails found</h3>
                    <p className="text-sm text-muted-foreground">
                      {emails.length > 0 
                        ? 'Try a different filter or tab' 
                        : 'Process new emails to see them here'}
                    </p>
                  </div>
                ) : (
                  <ScrollArea className="h-[500px]">
                    <div className="divide-y">
                      {filteredEmails.map((email) => (
                        <div
                          key={email.id}
                          className={cn(
                            "p-4 cursor-pointer hover:bg-muted/50 flex items-start gap-3",
                            selectedEmail?.id === email.id ? 'bg-muted' : ''
                          )}
                          onClick={() => viewEmail(email)}
                        >
                          <Avatar className="h-9 w-9 mt-1">
                            <AvatarFallback>{getInitials(getSenderName(email.sender))}</AvatarFallback>
                          </Avatar>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-start justify-between">
                              <div className="font-medium truncate">{email.subject || '(No subject)'}</div>
                            </div>
                            <div className="text-sm text-muted-foreground mt-1 truncate">
                              {email.contacts && email.contacts.length > 0 
                                ? getContactName(email.contacts[0]) 
                                : getSenderName(email.sender)}
                            </div>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground mt-1">
                              <Clock className="h-3 w-3" />
                              {formatDistanceToNow(new Date(email.created_at), { addSuffix: true })}
                              {email.contact_id && (
                                <Badge variant="outline" className="ml-1 text-xs">
                                  <User className="h-3 w-3 mr-1" />
                                  Contact
                                </Badge>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </ScrollArea>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Email Details */}
          <div className="md:col-span-2">
            {selectedEmail ? (
              <Tabs defaultValue="analysis">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="analysis">AI Analysis</TabsTrigger>
                  <TabsTrigger value="content">Email Content</TabsTrigger>
                  <TabsTrigger value="contact">Contact Info</TabsTrigger>
                </TabsList>
                
                <TabsContent value="analysis" className="mt-4">
                  <Card>
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div>
                          <CardTitle>{selectedEmail.subject || '(No subject)'}</CardTitle>
                          <CardDescription className="flex items-center gap-2">
                            <span>From:</span> 
                            <span className="font-medium">{selectedEmail.sender}</span>
                            <span className="text-xs text-muted-foreground">
                              {formatDistanceToNow(new Date(selectedEmail.created_at), { addSuffix: true })}
                            </span>
                          </CardDescription>
                        </div>
                        {selectedEmail.contacts && selectedEmail.contacts.length > 0 && (
                          <Badge variant="outline" className="ml-2">
                            <User className="h-3 w-3 mr-1" />
                            {getContactName(selectedEmail.contacts[0])}
                          </Badge>
                        )}
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="prose max-w-none dark:prose-invert">
                        <ScrollArea className="h-[600px]">
                          <div className="whitespace-pre-wrap">
                            {selectedEmail.analysis ? (
                              <div dangerouslySetInnerHTML={{ __html: selectedEmail.analysis.replace(/\n/g, '<br/>') }} />
                            ) : (
                              <div className="text-muted-foreground text-center py-8">
                                <AlertCircle className="h-12 w-12 mx-auto mb-2" />
                                <p>No analysis available for this email.</p>
                              </div>
                            )}
                          </div>
                        </ScrollArea>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="content" className="mt-4">
                <Card>
                  <CardHeader>
                    <CardTitle>{selectedEmail.subject || '(No subject)'}</CardTitle>
                    <CardDescription className="flex items-center gap-2">
                      <Calendar className="h-4 w-4" />
                      {format(new Date(selectedEmail.created_at), 'PPpp')}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ScrollArea className="h-[600px]">
                      <div className="prose max-w-none dark:prose-invert">
                        <div className="whitespace-pre-wrap font-mono text-sm">{selectedEmail.raw_content}</div>
                      </div>
                    </ScrollArea>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="contact" className="mt-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Contact Information</CardTitle>
                    <CardDescription>
                      {selectedEmail.contacts 
                        ? 'This email is linked to a contact' 
                        : 'This email is not linked to any contact'}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {selectedEmail.contacts && selectedEmail.contacts.length > 0 ? (
                      <div className="space-y-4">
                        <div className="flex items-center gap-4">
                          <Avatar className="h-16 w-16">
                            <AvatarFallback className="text-lg">
                              {getInitials(getContactName(selectedEmail.contacts[0]))}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <h3 className="text-lg font-medium">
                              {getContactName(selectedEmail.contacts[0])}
                            </h3>
                            <p className="text-sm text-muted-foreground">{selectedEmail.contacts[0].email}</p>
                            <Link 
                              href={`/dashboard/contacts/${selectedEmail.contact_id}`}
                              className="text-sm flex items-center gap-1 text-primary mt-1"
                            >
                              View contact <ChevronRight className="h-3 w-3" />
                            </Link>
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-8">
                        <User className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
                        <h3 className="text-lg font-medium">No linked contact</h3>
                        <p className="text-sm text-muted-foreground mb-4">
                          This email sender is not linked to any contact in your CRM
                        </p>
                        <Button
                          onClick={() => {
                            // Extract name from email address
                            const emailName = selectedEmail.sender.split('@')[0];
                            const nameParts = emailName.split(/[._-]/);
                            const firstName = nameParts[0] ? nameParts[0].charAt(0).toUpperCase() + nameParts[0].slice(1) : '';
                            const lastName = nameParts[1] ? nameParts[1].charAt(0).toUpperCase() + nameParts[1].slice(1) : '';
                            
                            // Navigate to create contact page with pre-filled data
                            window.location.href = `/dashboard/contacts/new?firstName=${firstName}&lastName=${lastName}&email=${encodeURIComponent(selectedEmail.sender)}`;
                          }}
                        >
                          Create Contact
                        </Button>
                      </div>
                    )}
                    ) : (
                      <>
                        <Textarea 
                          value={suggestedResponse} 
                          onChange={(e) => setSuggestedResponse(e.target.value)}
                          className="min-h-[300px] font-mono"
                        />
                        <div className="flex justify-end gap-2">
                          <Button variant="outline" onClick={() => setSuggestedResponse('')}>
                            Clear
                          </Button>
                          <Button>
                            <Send className="mr-2 h-4 w-4" />
                            Send Response
                          </Button>
                        </div>
                      </>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      );
    }
                Generate an AI-powered response to this email
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {!suggestedResponse ? (
                  <div className="text-center py-8">
                    <MessageSquare className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
                    <h3 className="text-lg font-medium">No response generated yet</h3>
                    <p className="text-sm text-muted-foreground mb-4">
                      Click the button below to generate a suggested response
                    </p>
                    <Button 
                      onClick={generateResponse}
                      disabled={generatingResponse}
                    >
                      {generatingResponse ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Generating...
                        </>
                      ) : (
                        <>
                          <MessageSquare className="mr-2 h-4 w-4" />
                          Generate Response
                        </>
                      )}
                    </Button>
                  </div>
                ) : (
                  <>
                    <Textarea 
                      value={suggestedResponse} 
                      onChange={(e) => setSuggestedResponse(e.target.value)}
                      className="min-h-[300px] font-mono"
                    />
                    <div className="flex justify-end gap-2">
                      <Button variant="outline" onClick={() => setSuggestedResponse('')}>
                        Clear
                      </Button>
                      <Button>
                        <Send className="mr-2 h-4 w-4" />
                        Send Response
                      </Button>
                    </div>
                  </>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
